//字符串旋转结果
//题目内容：
//写一个函数，判断一个字符串是否为另外一个字符串旋转之后的字符身
//例如：给定s1 = AABCD和s2 = BCDAA，返回1
//给定s1 = abcd和s2 = ACBD，返回0.
//AABCD左旋一个字符得到ABCDA
//AABCD左旋两个字符得到BCDAA
//AABCD右旋一个字符得到DAABC


//第一种方法
//void left_move(char* arr, int k)
//{
//	assert(arr);
//	int i = 0;
//	int len = strlen(arr);
//	for (i = 0; i < k; i++)
//	{
//		1.拿出第一个元素的字符
//		char tmp = *arr;
//		2.把后面的字符往前移一个字符
//		int j = 0;
//		for (j = 0; j < len - 1; j++)
//		{
//			*(arr + j) = *(arr + j + 1);
//		}
//		3.把第一个元素放到最后一个元素的位置
//		*(arr + len - 1) = tmp;
//	}
//}
//
//int is_left_move(char* s1, char* s2)
//{
//	int len = strlen(s1);
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		left_move(s1, 1);//旋转之后的字符串
//		int ret=strcmp(s1, s2);//用旋转之后的字符串和要比较的字符串进行比较
//		if (ret == 0)
//		{
//			return 1;
//		}
//	}
//	return 0;
//}
//
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret = is_left_move(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("yes\n");
//	}
//	else
//	{
//		printf("no\n");
//	}
//	return 0;
//}


//第二种发法

//int is_left_move(char* s1, char* s2)
//{
//	//在s1中追加一个s1的字符串
//	//判断s2指向的字符串是不是s1指向的字符串的字串
//
//	int len1 = strlen(s1);
//	int len2 = strlen(s2);
//	if (len1 != len2)//提前判断如果两个字符串的长度不相等那么就不可能是旋转之后的字符串
//		return 0;
//	strncat(s1, s1,6);//自己追加自己要用srtncat
//	char* ret=strstr(s1, s2);//strstr函数的返回类型是char*所以接收变量的类型要写成char*
//	if (ret == NULL)//如果返回值是null就是没有找到
//	{
//		return 0;
//	}
//	else
//	{
//		return 1;
//	}
//}
//
//int main()
//{
//	char arr1[30] = { "abcdef" };
//	char arr2[] = { "abcdf" };
//	int ret = is_left_move(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("yes\n");
//	}
//	else
//	{
//		printf("no\n");
//	}
//	return 0;
//}
