#include <stdlib.h>
#include<string.h>
//qsotr有四个参数
//void qsort(void* base, size_t nitems, size_t size, int (*compar)(const void*e1, const void*e2))
//void qsort(void* base,   //目标数组的位置
//			 nitems,     //数组的大小单位是元素
//			 size,       //每个元素的大小单位是字节
//	         int (*compar)(const void* e1, const void*e2 ))//比较两个元素大小的函数   
//              compar比较函数的返回值有三个
//              两个数相等返回0，
//              第一个数比第二个数大返回大于0的数
//              第一个数比第二个数大返回小于0的数
//
//
//void* 类型的指针 可以接收任意类型的地址
//void* 类型的指针 不能进行解引用操作
//void* 类型的不能进行 + -整数的操作


struct stu 
{
	char name[20];
	int age;
};


//排序整形数组
int cmp_int(const void* e1, const void* e2)
{
	return *((int*)e1) - *((int*)e2);//因为我们要排序的数组是整形但是是void*类型的指针接受因为void*类型的指着不能进行+-操作
                                      //所以把e1和e2强制类型转换成int*类型的
}

void test1()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}


//排序浮点型数组
int cmp_float(const void* e1, const void* e2)
{
	if (*(float*)e1 == *(float*)e2)
		return 0;
	else if (*(float*)e1 > *(float*)e2)
		return 1;
	else
		return -1;
	//return ((int)(*(float*)e1) - ( * (float*)e2)); //因为我们要排序的数组是float但是是void*类型的指针接受因为void*类型的指着不能进行+-操作
}                                                    //所以把e1和e2强制类型转换成float类型的

void test2()
{
	float f[] = { 9.0,8.0,7.0,6.0,5.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f, sz, sizeof(f[0]), cmp_float);
	int j = 0;
	for (j = 0; j < sz; j++)
	{
		printf("%f ", f[j]);
	}
}


//排序结构体数组按年龄排序
int cmp_stu_by_age(const void* e1, const void* e2)
{
	return ((struct stu*)e1)->age - ((struct stu*)e2)->age;
}

void test3()
{
	struct stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_stu_by_age);
}


//排序结构体数组按姓名排序
int cmp_stu_by_name(const void* e1, const void* e2)
{
	//因为是对名字进行排序而名字是字符长不能<>=来比较需要用到字符长比较函数strcmp函数
	//该函数有三个返回值和qsort最后一个参数函数指针的函数返回值一样
	//两个相等返回
	//第一个比第二个大返回大于0的数
    //第一个比第二个大返回小于0的数
	return strcmp(((struct stu*)e1)->name , ((struct stu*)e2)->name);
}

void test4()
{
	struct stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_stu_by_name);
}
