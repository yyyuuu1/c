//统计二进制中1的个数
//用函数参数返回

//第一种方法 
//int add(unsigned int n)//算法有缺陷当输入的数为负数时，就不可用    当把输入进来的数强制类型转换成无符号数（unsigned）时这种方法可行
//{
//	int count = 0;
//	while (n)
//	{
//		if (n % 2 == 1)//当n模二等于1时，就找到了二进制序列中的一个1
//		{
//			count++;//找到一次计数器加加，最后累计出来的就是二进制序列中1的个数
//		}
//		n = n / 2;//n/2可以去掉n取模后最后一位的数字
//	}
//	return count;
//}

//第二种方法 
//int add(int n)   至少要循环32次
//{
//	int count = 0;
//	int i = 0;
//	for (i = 0; i < 32; i++)//因为在32平台中二进制时32位
//	{
//		if (((n >> i) & 1==1))//当n向右移动i位后和1进行按位与如果结果等于1count加加最后的结果就是二进制中1的个数
//		{
//			count++;
//		}
//	}
//	return count;
//}

//第三种方法 
//int add(int n)    这种方法最精简
//{
//	int count = 0;
//	while (n)
//	{
//		n = n & (n - 1);//这给操作执行几次就有几个1当n等于0时count里存放 的就是1的个数
//		count++;
//	}
//	return count;
//}
//n=n&(n-1)
// n
//13
//1101 n  13的二进制源码因为是正数所有源码反码补码都相同
//1100 n-1
//1100 n          把n和n-1的按位与之后的数重新付给n
//1011 n-1
//1000 n
//0111 n-1
//0000 n            最后n和n-1的进行按位与一次就可以去掉一个1，循环往复当n变成0时所有1的个数就都知道了

//int main()
//{
//	int a = 0;
//	scanf_s("%d", &a);
//	//写一个函数求a的二进制(补码)中有几个1
//	int count = add(a);//-1
//	//-1
//	//10000000000000000000000000000001    -1的源码
//	//11111111111111111111111111111110    -1的反码
//  //11111111111111111111111111111111    -1的补码  
//	//00000000000000000000000000000001       让输入数的补码和1按位与，当按位与之后，把输入数的补码向右移动一位在继续和1按位与
//	//13                                                                            这样的操作需要31次按位与
//	//00000000000000000000000000001101
//	printf("count= %d ", count);
//	return 0;
//}
