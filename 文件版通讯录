#include"contact.h"


void menu()
{
	printf("*******1.add         2.del***********\n");
	printf("*******3.search      4.modify********\n");
	printf("*******5.show        6.sotr**********\n");
	printf("*******0.exit        7.save**********\n");
	printf("*************************************\n");
	printf("*************************************\n");

}

int main()
{
	int input = 0;
	//创建通讯录
	struct Contact con;//con就是一个通讯录里面包含date指针和size ,capacity
	//初始化通讯录
	InitContact(&con);
	//

	do
	{
		menu();
		printf("请选择\n");
		scanf_s("%d", &input);
		switch (input)
		{
		case ADD://增加
			AddContact(&con);
			break;
		case DEL://删除
			detcontact(&con);
			break;
		case SEARCH://查找
			searchcontace(&con);
			break;
		case MODIFY://修改
			modifcontact(&con);
			break;
		case SHOW://显示
			showContact(&con);
			break;
		case SORT://排序
			//sortContact(&con);
			break;
		case EXIT:
			//销毁通讯录 释放动态开辟的内存
			savecontact(&con);
			destorycontact(&con); 
			printf("退出通讯录\n");
			break;
		case SAVE:
			savecontact(&con);
			break;
		default:
			printf("选择错误\n");
			break;
		}
	} while (input);
	return 0;
}


#include"contact.h"

//初始化通讯录的函数
void InitContact(struct Contact* ps)
{
	ps->date = (struct peoinfo*)malloc(DEFAULT_SZ * sizeof(struct peoinfo));
	if (ps->date == NULL)
	{
		return ;
	}
	ps->size = 0;
	ps->capacity = DEFAULT_SZ;
	//把文件中存放的信息加载到通讯录中
	loadcontact(ps);
}

void checkcapacity(struct Contact* ps);

void loadcontact(struct Contact* ps)
{
	struct peoinfo tmp = { 0 };
	FILE* read = fopen("Contact.txt", "r");
	if (read == NULL)
	{
		printf("loadcontact:%s\n", strerror(errno));
		return;
	}
	//读取文件存到通讯录中

	while (fread(&tmp, sizeof(struct peoinfo), 1, read))
	{
		checkcapacity(ps);
		ps->date[ps->size] = tmp;
		ps->size++;

	}

	fclose(read);
	read = NULL;
}



void checkcapacity(struct Contact* ps)
{
	if (ps->size == ps->capacity)//如果当前通讯录已有元素和通讯录最大容量相等那么增容
	{
		//增容
		struct peoinfo* ptr = (struct peoinfo*)realloc(ps->date,(ps->capacity + 2) * sizeof(struct peoinfo));
		if (ptr != NULL)
		{
			ps->date = ptr;
			ps->capacity += 2;
			printf("增容成功\n");
		}
		else
		{
			printf("增容失败\n");
		}

	}
}

//增加一个信息添加到通讯录
void AddContact(struct Contact* ps)
{
	//检测当前你通讯录的容量
	//1.如果满了，增加数据
	//2.如果没满，什么都不干
	checkcapacity(ps);
	//增加数据
	printf("请输入名字");
	scanf("%s", ps->date[ps->size].name);//ps->date指向那个数组  数组的下标是[ps->size]就是找到了数组的一个元素
	printf("请输入年龄");
	scanf("%d", &(ps->date[ps->size].age));//因为年龄是整形所有要取地址
	printf("请输入性别");
	scanf("%s", ps->date[ps->size].sex);
	printf("请输入电话");
	scanf("%s", ps->date[ps->size].tele);
	printf("请输入地址");
	scanf("%s", ps->date[ps->size].addr);
	ps->size++;
	printf("添加成功\n");

}


//打印通讯录中的信息
void showContact(const struct Contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		int i = 0;
		//打印标题
		printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n ", "名字", "年龄", "性别", "电话", "住址");
		for (i = 0; i < ps->size; i++)
		{
			printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n", ps->date[i].name,
				ps->date[i].age,
				ps->date[i].sex,
				ps->date[i].tele,
				ps->date[i].addr);
		}

	}
}

//static 修饰后只能在contact.c里使用
static int findbyname(const struct Contact* ps, char name[MAX_NAME])
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		//字符串比较必须要用strcmp不可以用等号
		//srrcmp有三个返回值如果两个字符串相等则返回0
		if (0 == strcmp(ps->date[i].name, name))
		{
			return i;
		}
	}
	return -1;//找不到的情况
}


//删除指定的联系人
void detcontact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入删除的人的名字\n");
	scanf("%s", name);
	//1.查找要删除的人在什么位置
	int pos = findbyname(ps, name);//找到了返回名字元素下标  找不到返回-1
	//2。删除
	if (pos == -1)
	{
		printf("要删除的人不存在\n");
	}
	else
	{
		//删除数据
		int j = 0;
		for (j = pos; j < ps->size - 1; j++)
		{
			ps->date[j] = ps->date[j + 1];
		}
		ps->size--;
		printf("删除成功\n");
	}

}


//查找指定的联系人
void searchcontace(const struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要查找的人的名字\n");
	scanf("%s", name);
	int pos = findbyname(ps, name);
	if (pos == -1)
	{
		printf("要查找的人不存在\n");
	}
	else
	{
		printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n ", "名字", "年龄", "性别", "电话", "住址");
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n", ps->date[pos].name,
			ps->date[pos].age,
			ps->date[pos].sex,
			ps->date[pos].tele,
			ps->date[pos].addr);
	}

}


void modifcontact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要修改的名字\n");
	scanf("%s", name);
	int pos = findbyname(ps, name);
	if (pos == -1)
	{
		printf("要修改的人的信息不存在\n");
	}
	else
	{
		printf("请输入名字");
		scanf("%s", ps->date[pos].name);
		printf("请输入年龄");
		scanf("%d", &(ps->date[pos].age));
		printf("请输入性别");
		scanf("%s", ps->date[pos].sex);
		printf("请输入电话");
		scanf("%s", ps->date[pos].tele);
		printf("请输入地址");
		scanf("%s", ps->date[pos].addr);
		printf("修改成功\n");
	}
}


void destorycontact(struct Contact* ps)
{
	free(ps->date);
	ps->date = NULL;
}



void savecontact(struct Contact* ps)
{
	FILE* pf= fopen("Contact.txt", "wb");
	if (pf == NULL)
	{
		printf("savecontact:%s\n", strerror(errno));
		return ;
	}
	//写通讯录数据到文件中
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		fwrite(&(ps->date[i]), sizeof(struct peoinfo), 1, pf);
	}

	fclose(pf);
	pf = NULL;
}

//排序通讯录的内容

//int cmp_by_name(const void* e1, const void* e2)
//{
//	return strcmp((struct peoinfo*)e1, (struct peoinfo*)e2);
//}
//
//void swap(char* buf1, char* buf2, int width)
//{
//	int i = 0;
//	for (i = 0; i < width; i++)
//	{
//		char tmp = *buf1;
//		*buf1 = *buf2;
//		*buf2 = tmp;
//		buf1++;
//		buf2++;
//	}
//}
//
//void bubble_sort(void* base, int sz, int width, int(*cmp)(void* e1, void* e2))
//{
//	int i = 0;
//	for (i = 0; i < sz - 1; i++)
//	{
//		int j = 0;
//		for (j = 0; j < sz - 1 - i; j++)
//		{
//			if (cmp((char*)base + j * width, (char*)base + (j + 1) * width) > 0)
//			{
//				swap((char*)base + j * width, (char*)base + (j + 1) * width, width);
//			}
//		}
//	}
//}
//
//void sortContact(struct Contact* ps)
//{
//	bubble_sort(ps->date, ps->size, sizeof(ps->date), cmp_by_name);
//	//printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n ", "名字", "年龄", "性别", "电话", "住址");
//	//printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n", ps->date[MAX_NAME].name,
//	//	ps->date[MAX_NAME].age,
//	//	ps->date[MAX_NAME].sex,
//	//	ps->date[MAX_NAME].tele,
//	//	ps->date[MAX_NAME].addr);
//
//	showContact(ps);
//}






#pragma once
#pragma once
#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//#define MAX 100
#define MAX_NAME 20
#define MAX_SEX 5
#define MAX_TELE 12
#define MAX_ADDR 30
#define DEFAULT_SZ 3



enum Option
{
	EXIT,
	ADD,
	DEL,
	SEARCH,
	MODIFY,
	SHOW,
	SORT,
	SAVE
};


struct peoinfo
{
	char name[MAX_NAME];//名字
	int age;//年龄
	char sex[MAX_SEX];//性别
	char tele[MAX_TELE];//电话
	char addr[MAX_ADDR];//住址
};

//定义一个通讯录类型
struct Contact
{
	struct peoinfo *date;//存放一个信息
	int size;//记录当前已有元素的个数
	int capacity;//当前通讯录的最大容量
};

//函数声明
//初始化通讯录的函数
void InitContact(struct Contact* ps);
//增加一个信息添加到通讯录
void AddContact(struct Contact* con);
//打印通讯录中的信息
void showContact(const struct Contatc* ps);
//删除指定的联系人
void detcontact(struct Contact* ps);
//查找指定的联系人
void searchcontace(const struct Contact* ps);
//修改指定联系人的信息
void modifcontact(struct Contact* ps);
//排序通讯录的内容
void sortContact(struct Contact* ps);

void destorycontact(struct Contact*ps);

//保存文件
void savecontact(struct Contact *ps);
//加载文件中的信息
void loadcontact(struct contact*ps);
